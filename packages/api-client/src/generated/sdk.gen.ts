// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { ContinueRunApiV1RunsRunIdContinuePostData, ContinueRunApiV1RunsRunIdContinuePostErrors, ContinueRunApiV1RunsRunIdContinuePostResponses, CreateRunApiV1RunsPostData, CreateRunApiV1RunsPostErrors, CreateRunApiV1RunsPostResponses, GetAllUsersApiV1AuthUsersGetData, GetAllUsersApiV1AuthUsersGetResponses, GetCurrentUserInfoApiV1AuthMeGetData, GetCurrentUserInfoApiV1AuthMeGetResponses, GetFlowApiV1FlowsFlowIdGetData, GetFlowApiV1FlowsFlowIdGetErrors, GetFlowApiV1FlowsFlowIdGetResponses, GetRunApiV1RunsRunIdGetData, GetRunApiV1RunsRunIdGetErrors, GetRunApiV1RunsRunIdGetResponses, GetRunArtifactApiV1RunsRunIdArtifactGetData, GetRunArtifactApiV1RunsRunIdArtifactGetErrors, GetRunArtifactApiV1RunsRunIdArtifactGetResponses, GetRunEventsApiV1RunsRunIdEventsGetData, GetRunEventsApiV1RunsRunIdEventsGetErrors, GetRunEventsApiV1RunsRunIdEventsGetResponses, GetRunSessionsApiV1RunsRunIdSessionsGetData, GetRunSessionsApiV1RunsRunIdSessionsGetErrors, GetRunSessionsApiV1RunsRunIdSessionsGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, ListFlowsApiV1FlowsGetData, ListFlowsApiV1FlowsGetErrors, ListFlowsApiV1FlowsGetResponses, ListRunsApiV1RunsGetData, ListRunsApiV1RunsGetErrors, ListRunsApiV1RunsGetResponses, LoginApiV1AuthLoginPostData, LoginApiV1AuthLoginPostErrors, LoginApiV1AuthLoginPostResponses, RefreshAccessTokenApiV1AuthRefreshPostData, RefreshAccessTokenApiV1AuthRefreshPostErrors, RefreshAccessTokenApiV1AuthRefreshPostResponses, RegisterUserApiV1AuthRegisterPostData, RegisterUserApiV1AuthRegisterPostErrors, RegisterUserApiV1AuthRegisterPostResponses, UpdateRunApiV1RunsRunIdPatchData, UpdateRunApiV1RunsRunIdPatchErrors, UpdateRunApiV1RunsRunIdPatchResponses, UpdateUserRoleApiV1AuthUsersUserIdRolePatchData, UpdateUserRoleApiV1AuthUsersUserIdRolePatchErrors, UpdateUserRoleApiV1AuthUsersUserIdRolePatchResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Runs
 * List runs with pagination. Regular users see only their runs, admins see all.
 */
export const listRunsApiV1RunsGet = <ThrowOnError extends boolean = false>(options?: Options<ListRunsApiV1RunsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRunsApiV1RunsGetResponses, ListRunsApiV1RunsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs',
        ...options
    });
};

/**
 * Create Run
 * Create a new run, initialize browser session, return run with session URL.
 */
export const createRunApiV1RunsPost = <ThrowOnError extends boolean = false>(options: Options<CreateRunApiV1RunsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateRunApiV1RunsPostResponses, CreateRunApiV1RunsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Run
 * Get details of a specific run by ID.
 */
export const getRunApiV1RunsRunIdGet = <ThrowOnError extends boolean = false>(options: Options<GetRunApiV1RunsRunIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRunApiV1RunsRunIdGetResponses, GetRunApiV1RunsRunIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs/{run_id}',
        ...options
    });
};

/**
 * Update Run
 * Update an existing run.
 */
export const updateRunApiV1RunsRunIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateRunApiV1RunsRunIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateRunApiV1RunsRunIdPatchResponses, UpdateRunApiV1RunsRunIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs/{run_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Run Sessions
 * Get all sessions for a specific run.
 */
export const getRunSessionsApiV1RunsRunIdSessionsGet = <ThrowOnError extends boolean = false>(options: Options<GetRunSessionsApiV1RunsRunIdSessionsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRunSessionsApiV1RunsRunIdSessionsGetResponses, GetRunSessionsApiV1RunsRunIdSessionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs/{run_id}/sessions',
        ...options
    });
};

/**
 * Get Run Events
 * Get all events for a specific run.
 */
export const getRunEventsApiV1RunsRunIdEventsGet = <ThrowOnError extends boolean = false>(options: Options<GetRunEventsApiV1RunsRunIdEventsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRunEventsApiV1RunsRunIdEventsGetResponses, GetRunEventsApiV1RunsRunIdEventsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs/{run_id}/events',
        ...options
    });
};

/**
 * Continue Run
 * Continue a run that is awaiting input.
 */
export const continueRunApiV1RunsRunIdContinuePost = <ThrowOnError extends boolean = false>(options: Options<ContinueRunApiV1RunsRunIdContinuePostData, ThrowOnError>) => {
    return (options.client ?? client).post<ContinueRunApiV1RunsRunIdContinuePostResponses, ContinueRunApiV1RunsRunIdContinuePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs/{run_id}/continue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Run Artifact
 * Stream the artifact produced by a run to the client.
 */
export const getRunArtifactApiV1RunsRunIdArtifactGet = <ThrowOnError extends boolean = false>(options: Options<GetRunArtifactApiV1RunsRunIdArtifactGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRunArtifactApiV1RunsRunIdArtifactGetResponses, GetRunArtifactApiV1RunsRunIdArtifactGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/runs/{run_id}/artifact',
        ...options
    });
};

/**
 * Register User
 * Register a new user. First user becomes admin automatically.
 */
export const registerUserApiV1AuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserApiV1AuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterUserApiV1AuthRegisterPostResponses, RegisterUserApiV1AuthRegisterPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 * Authenticate user and return JWT tokens (OAuth2 compatible).
 */
export const loginApiV1AuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginApiV1AuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginApiV1AuthLoginPostResponses, LoginApiV1AuthLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Refresh Access Token
 * Refresh access token using a valid refresh token.
 */
export const refreshAccessTokenApiV1AuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshAccessTokenApiV1AuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshAccessTokenApiV1AuthRefreshPostResponses, RefreshAccessTokenApiV1AuthRefreshPostErrors, ThrowOnError>({
        url: '/api/v1/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Current User Info
 * Get current authenticated user information.
 */
export const getCurrentUserInfoApiV1AuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserInfoApiV1AuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCurrentUserInfoApiV1AuthMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/me',
        ...options
    });
};

/**
 * Get All Users
 * Get all users (admin only).
 */
export const getAllUsersApiV1AuthUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersApiV1AuthUsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersApiV1AuthUsersGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/users',
        ...options
    });
};

/**
 * Update User Role
 * Update a user role (admin only).
 */
export const updateUserRoleApiV1AuthUsersUserIdRolePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserRoleApiV1AuthUsersUserIdRolePatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateUserRoleApiV1AuthUsersUserIdRolePatchResponses, UpdateUserRoleApiV1AuthUsersUserIdRolePatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/users/{user_id}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Flows
 * List flows visible to the current user with pagination.
 *
 * Admins see all flows, users see flows they created.
 */
export const listFlowsApiV1FlowsGet = <ThrowOnError extends boolean = false>(options?: Options<ListFlowsApiV1FlowsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListFlowsApiV1FlowsGetResponses, ListFlowsApiV1FlowsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/flows',
        ...options
    });
};

/**
 * Get Flow
 * Get details of a specific flow if visible to the current user.
 */
export const getFlowApiV1FlowsFlowIdGet = <ThrowOnError extends boolean = false>(options: Options<GetFlowApiV1FlowsFlowIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFlowApiV1FlowsFlowIdGetResponses, GetFlowApiV1FlowsFlowIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/flows/{flow_id}',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint for the worker service.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};
