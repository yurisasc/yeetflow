"""event status update

Revision ID: 427444eb5d2c
Revises: c86fdf272815
Create Date: 2025-09-29 13:36:08.796604

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "427444eb5d2c"
down_revision: str | Sequence[str] | None = "c86fdf272815"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # Ensure ENUM type exists
    event_type_enum = sa.Enum(
        "status",
        "log",
        "step_start",
        "step_end",
        "checkpoint",
        "prompt",
        "artifact",
        "screenshot",
        "error",
        name="eventtype",
    )
    event_type_enum.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("event", schema=None) as batch_op:
        # Remodel legacy tokens to the new ENUM before altering the column.
        batch_op.execute(
            sa.text(
                """
                UPDATE event
                SET type = CASE type
                    WHEN 'PROGRESS'        THEN 'status'
                    WHEN 'ACTION_REQUIRED' THEN 'prompt'
                    WHEN 'ACTION_ACK'      THEN 'status'
                    WHEN 'COMPLETED'       THEN 'step_end'
                    WHEN 'FAILED'          THEN 'error'
                    WHEN 'RUN_CONTINUED'   THEN 'status'
                    ELSE type
                END
                """
            )
        )
        # Any remaining unknowns -> 'status' to guarantee the cast succeeds
        batch_op.execute(
            sa.text(
                """
                UPDATE event
                SET type = 'status'
                WHERE type NOT IN (
                  'status','log','step_start','step_end','checkpoint',
                  'prompt','artifact','screenshot','error'
                )
                """
            )
        )
        batch_op.alter_column(
            "type",
            existing_type=sa.VARCHAR(length=15),
            type_=event_type_enum,
            existing_nullable=False,
            postgresql_using="type::text::eventtype",
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    event_type_enum = sa.Enum(
        "status",
        "log",
        "step_start",
        "step_end",
        "checkpoint",
        "prompt",
        "artifact",
        "screenshot",
        "error",
        name="eventtype",
    )

    with op.batch_alter_table("event", schema=None) as batch_op:
        batch_op.alter_column(
            "type",
            existing_type=event_type_enum,
            type_=sa.VARCHAR(length=15),
            existing_nullable=False,
        )

    event_type_enum.drop(op.get_bind(), checkfirst=True)

    # ### end Alembic commands ###
