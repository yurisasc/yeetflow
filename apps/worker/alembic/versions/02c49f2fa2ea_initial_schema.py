"""Initial schema

Revision ID: 02c49f2fa2ea
Revises:
Create Date: 2025-09-21 23:47:47.692041

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import sqlite

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "02c49f2fa2ea"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "role",
            sa.Enum("user", "admin", name="userrole"),
            server_default="user",
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("password_hash", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_user_email"), ["email"], unique=True)

    op.create_table(
        "flow",
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_by", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["created_by"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("flow", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_flow_created_by"), ["created_by"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_flow_key"), ["key"], unique=True)

    op.create_table(
        "run",
        sa.Column(
            "status",
            sa.Enum(
                "pending",
                "running",
                "awaiting_input",
                "completed",
                "failed",
                name="runstatus",
            ),
            server_default="pending",
            nullable=False,
        ),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("error", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("result_uri", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("flow_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["flow_id"], ["flow.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("run", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_run_flow_id"), ["flow_id"], unique=False)
        batch_op.create_index(
            "ix_run_user_created_at_id", ["user_id", "created_at", "id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_run_user_id"), ["user_id"], unique=False)
        batch_op.create_index(
            "idx_runs_user_id_created_at", ["user_id", "created_at"], unique=False
        )

    op.create_table(
        "event",
        sa.Column(
            "type",
            sa.Enum(
                "progress",
                "action_required",
                "action_ack",
                "completed",
                "failed",
                "run_continued",
                name="eventtype",
            ),
            nullable=False,
        ),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("payload", sqlite.JSON(), nullable=False),
        sa.Column("at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("run_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("event", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_event_run_id"), ["run_id"], unique=False)

    op.create_table(
        "session",
        sa.Column(
            "browser_provider_session_id",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum("starting", "active", "paused", "ended", name="sessionstatus"),
            server_default="starting",
            nullable=False,
        ),
        sa.Column("session_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("run_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["run_id"], ["run.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("session", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_session_run_id"), ["run_id"], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("session", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_session_run_id"))

    op.drop_table("session")
    with op.batch_alter_table("event", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_event_run_id"))

    op.drop_table("event")
    with op.batch_alter_table("run", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_run_user_id"))
        batch_op.drop_index("ix_run_user_created_at_id")
        batch_op.drop_index("idx_runs_user_id_created_at")
        batch_op.drop_index(batch_op.f("ix_run_flow_id"))

    op.drop_table("run")
    with op.batch_alter_table("flow", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_flow_key"))
        batch_op.drop_index(batch_op.f("ix_flow_created_by"))

    op.drop_table("flow")
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_email"))

    op.drop_table("user")
    # ### end Alembic commands ###

    # Clean up enums on Postgres
    bind = op.get_bind()
    if bind.dialect.name == "postgresql":
        op.execute("DROP TYPE IF EXISTS userrole")
        op.execute("DROP TYPE IF EXISTS runstatus")
        op.execute("DROP TYPE IF EXISTS eventtype")
        op.execute("DROP TYPE IF EXISTS sessionstatus")
